const express = require('express');
const session = require('express-session');
const path = require('path');
const sqlite3 = require('sqlite3').verbose();
const bcrypt = require('bcryptjs');
const multer = require('multer');

const app = express();
const PORT = 3000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'public/uploads/')
    },
    filename: function (req, file, cb) {
        cb(null, Date.now() + '-' + file.originalname)
    }
});
const upload = multer({ 
    storage: storage,
    limits: { fileSize: 5 * 1024 * 1024 } // 5MB
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database('./database/student_rating.db', (err) => {
    if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
    } else {
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }
});

// Middleware
app.use(express.static('public'));
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(session({
    secret: 'your-secret-key-change-this',
    resave: false,
    saveUninitialized: false
}));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ EJS
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
const requireAdmin = (req, res, next) => {
    if (req.session.user && req.session.user.role === 'admin') {
        next();
    } else {
        res.status(403).send('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    }
};

// –ú–∞—Ä—à—Ä—É—Ç—ã
app.get('/', (req, res) => {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    db.all(`SELECT id, fullName, groupName, rating FROM users WHERE role = 'student' ORDER BY rating DESC LIMIT 10`, 
        (err, topStudents) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', err);
                topStudents = [];
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
            db.all(`SELECT n.*, u.fullName as authorName 
                   FROM news n 
                   JOIN users u ON n.authorId = u.id 
                   ORDER BY n.createdAt DESC LIMIT 5`, 
                (err, latestNews) => {
                    if (err) {
                        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π:', err);
                        latestNews = [];
                    }

                    res.render('index', {
                        user: req.session.user,
                        topStudents,
                        latestNews
                    });
                });
        });
});

app.get('/auth/login', (req, res) => {
    if (req.session.user) return res.redirect('/profile');
    res.render('login', { error: null, email: '' });
});

app.post('/auth/login', (req, res) => {
    const { email, password } = req.body;

    db.get(`SELECT * FROM users WHERE email = ?`, [email], (err, user) => {
        if (err) {
            return res.render('login', { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', email });
        }

        if (!user || !bcrypt.compareSync(password, user.password)) {
            return res.render('login', { error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å', email });
        }

        req.session.user = {
            id: user.id,
            fullName: user.fullName,
            email: user.email,
            role: user.role,
            group: user.groupName,
            rating: user.rating
        };

        res.redirect('/profile');
    });
});

app.get('/profile', (req, res) => {
    if (!req.session.user) return res.redirect('/auth/login');

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.all(`SELECT * FROM achievements WHERE studentId = ? ORDER BY createdAt DESC`, 
        [req.session.user.id], (err, achievements) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', err);
                achievements = [];
            }

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
            db.all(`SELECT id, rating FROM users WHERE role = 'student' ORDER BY rating DESC`, 
                (err, allStudents) => {
                    const rank = allStudents.findIndex(s => s.id === req.session.user.id) + 1;

                    res.render('profile', {
                        user: req.session.user,
                        achievements,
                        rank: rank || '‚Äî'
                    });
                });
        });
});

// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
app.get('/admin', requireAdmin, (req, res) => {
    db.all(`SELECT id, fullName, groupName, email, rating FROM users WHERE role = 'student' ORDER BY fullName`, 
        (err, users) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
                users = [];
            }
            res.render('admin', { users });
        });
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—â–µ–≥–æ—Å—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
app.post('/admin/add-student', requireAdmin, (req, res) => {
    const { fullName, phone, groupName, email, password } = req.body;

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å —Å bcrypt
    const hashedPassword = bcrypt.hashSync(password, 12);

    db.run(`INSERT INTO users (fullName, phone, groupName, email, password, role) VALUES (?, ?, ?, ?, ?, ?)`,
        [fullName, phone, groupName, email, hashedPassword, 'student'],
        function(err) {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—â–µ–≥–æ—Å—è:', err);
                return res.redirect('/admin?error=–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
            }
            res.redirect('/admin?success=–£—á–∞—â–∏–π—Å—è –¥–æ–±–∞–≤–ª–µ–Ω');
        });
});

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
app.post('/admin/delete-user/:id', requireAdmin, (req, res) => {
    const userId = req.params.id;
    
    db.run(`DELETE FROM users WHERE id = ? AND role = 'student'`, [userId], function(err) {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
        }
        res.redirect('/admin');
    });
});

app.get('/auth/logout', (req, res) => {
    req.session.destroy();
    res.redirect('/');
});

app.get('/test', (req, res) => {
    res.send('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö!');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    console.log(`üíæ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö`);
    console.log(`üëë –ê–¥–º–∏–Ω: admin@college.ru / admin123`);
    console.log(`üë• –°—Ç—É–¥–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å`);
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
process.on('SIGINT', () => {
    db.close();
    process.exit();
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
app.get('/news/:id', (req, res) => {
    const newsId = req.params.id;
    
    db.get(`SELECT n.*, u.fullName as authorName 
            FROM news n 
            JOIN users u ON n.authorId = u.id 
            WHERE n.id = ?`, [newsId], (err, news) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏:', err);
            return res.status(404).send('–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        if (!news) {
            return res.status(404).send('–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥—Ä—É–≥–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –±–æ–∫–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
        db.all(`SELECT n.*, u.fullName as authorName 
                FROM news n 
                JOIN users u ON n.authorId = u.id 
                WHERE n.id != ? 
                ORDER BY n.createdAt DESC LIMIT 3`, [newsId], (err, otherNews) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:', err);
                otherNews = [];
            }

            res.render('news-single', {
                user: req.session.user,
                news,
                otherNews
            });
        });
    });
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
app.get('/news', (req, res) => {
    db.all(`SELECT n.*, u.fullName as authorName 
            FROM news n 
            JOIN users u ON n.authorId = u.id 
            ORDER BY n.createdAt DESC`, (err, allNews) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π:', err);
            allNews = [];
        }

        res.render('news', {
            user: req.session.user,
            news: allNews
        });
    });
});